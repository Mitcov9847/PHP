# Лабораторная работа №2

## Цель
Закрепить навыки работы с условными конструкциями (`if`, тернарный оператор) и циклами (`for`, `while`, `do-while`) в PHP.

## Задание 1. Условные конструкции
Используйте функцию `date()` для формирования расписания сотрудников на основе текущего дня недели.

### Таблица сотрудников и их график работы

| №  | Фамилия Имя   | График работы   |
|----|--------------|----------------|
| 1  | John Styles  | xx - xx        |
| 2  | Jane Doe     | yy - yy        |

### Правила формирования расписания

- **Для John Styles:**  
  - Рабочие дни: **понедельник, среда, пятница** → `08:00 - 12:00`
  - В остальные дни → `Нерабочий день`

- **Для Jane Doe:**  
  - Рабочие дни: **вторник, четверг, суббота** → `12:00 - 16:00`
  - В остальные дни → `Нерабочий день`

---

## Реализация

```php
<?php
// Получаем текущий день недели в числовом формате (1 - понедельник, 7 - воскресенье)
$dayOfWeek = date('N');

// Функция для определения графика работы сотрудника
function getSchedule($employee)
{
    global $dayOfWeek;

    if ($employee === 'John Styles') {
        return in_array($dayOfWeek, [1, 3, 5]) ? '08:00 - 12:00' : 'Нерабочий день';
    } elseif ($employee === 'Jane Doe') {
        return in_array($dayOfWeek, [2, 4, 6]) ? '12:00 - 16:00' : 'Нерабочий день';
    }
    return 'Неизвестный сотрудник';
}

// Пример использования функции
echo "John Styles: " . getSchedule('John Styles') . PHP_EOL;
echo "Jane Doe: " . getSchedule('Jane Doe') . PHP_EOL;
?>
```

## Краткое пояснение кода
1. `date('N')` — получает текущий день недели в числовом формате (1 = понедельник, 7 = воскресенье).
2. Функция `getSchedule($employee)` определяет расписание работы:
   - Используется `in_array($dayOfWeek, [...])` для проверки, является ли день рабочим.
   - Если день совпадает с рабочим графиком сотрудника, возвращается время работы.
   - В противном случае — `Нерабочий день`.
3. Вывод расписания выполняется с помощью `echo`.
